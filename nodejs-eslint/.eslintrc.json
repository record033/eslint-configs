{
  "extends": [
    "eslint:recommended",
    "plugin:node/recommended",
    "plugin:import/errors",
    "plugin:import/warnings",
    "prettier"
  ],
  "env": {
    "node": true,
    "jest": true,
    "es6": true
  },
  "parserOptions": {
    "ecmaVersion": 2020,
    "sourceType": "module"
  },
  "rules": {
    "node/no-unsupported-features/es-syntax": "off",
    "no-useless-catch": "warn",
    "arrow-body-style": [
      "warn",
      "as-needed",
      {
        "requireReturnForObjectLiteral": false
      }
    ],
    "curly": [
      "error",
      "all"
    ],
    "max-len": [
      "error",
      100,
      4,
      {
        "ignoreUrls": true,
        "ignoreRegExpLiterals": true
      }
    ],
    "no-tabs": "error",
    "no-unexpected-multiline": "error",
    "prefer-arrow-callback": "error",
    "init-declarations": "off",
    "no-catch-shadow": "off",
    "no-delete-var": "error",
    "no-label-var": "error",
    "no-shadow": "error",
    "no-shadow-restricted-names": "error",
    "no-undef": "error",
    "no-undef-init": "error",
    "no-undefined": "off",
    "no-unused-vars": [
      "error",
      {
        "vars": "all",
        "args": "after-used",
        "ignoreRestSiblings": true,
        "argsIgnorePattern": "err|error|next|req|res"
      }
    ],
    "no-use-before-define": [
      "error",
      {
        "functions": false,
        "classes": true,
        "variables": true
      }
    ],
    "no-restricted-globals": [
      "error",
      "isFinite",
      "isNaN",
      "addEventListener",
      "blur",
      "close",
      "closed",
      "confirm",
      "defaultStatus",
      "event",
      "external",
      "defaultstatus",
      "find",
      "focus",
      "frameElement",
      "frames",
      "history",
      "innerHeight",
      "innerWidth",
      "length",
      "location",
      "locationbar",
      "menubar",
      "moveBy",
      "moveTo",
      "name",
      "onblur",
      "onerror",
      "onfocus",
      "onload",
      "onresize",
      "onunload",
      "open",
      "opener",
      "opera",
      "outerHeight",
      "outerWidth",
      "pageXOffset",
      "pageYOffset",
      "parent",
      "print",
      "removeEventListener",
      "resizeBy",
      "resizeTo",
      "screen",
      "screenLeft",
      "screenTop",
      "screenX",
      "screenY",
      "scroll",
      "scrollbars",
      "scrollBy",
      "scrollTo",
      "scrollX",
      "scrollY",
      "self",
      "status",
      "statusbar",
      "stop",
      "toolbar",
      "top",
      "import"
    ],
    "for-direction": "error",
    "getter-return": "error",
    "no-async-promise-executor": "off",
    "no-compare-neg-zero": "error",
    "no-cond-assign": [
      "warn",
      "except-parens"
    ],
    "no-console": "warn",
    "no-constant-condition": "error",
    "no-control-regex": "error",
    "no-debugger": "error",
    "no-dupe-args": "error",
    "no-dupe-keys": "error",
    "no-duplicate-case": "error",
    "no-empty": [
      "error",
      {
        "allowEmptyCatch": true
      }
    ],
    "no-empty-character-class": "error",
    "no-ex-assign": "error",
    "no-extra-boolean-cast": "error",
    "no-func-assign": "error",
    "no-inner-declarations": "off",
    "no-invalid-regexp": "error",
    "no-irregular-whitespace": "warn",
    "no-misleading-character-class": "warn",
    "no-obj-calls": "warn",
    "no-prototype-builtins": "error",
    "no-regex-spaces": "warn",
    "no-sparse-arrays": "error",
    "no-template-curly-in-string": "warn",
    "no-unreachable": "error",
    "no-unsafe-finally": "error",
    "no-unsafe-negation": "error",
    "require-atomic-updates": "off",
    "use-isnan": "error",
    "valid-jsdoc": "warn",
    "valid-typeof": [
      "error",
      {
        "requireStringLiterals": true
      }
    ],
    "constructor-super": "warn",
    "no-class-assign": "error",
    "no-const-assign": "error",
    "no-dupe-class-members": "error",
    "no-duplicate-imports": [
      "error",
      {
        "includeExports": true
      }
    ],
    "no-new-symbol": "error",
    "no-this-before-super": "error",
    "no-useless-computed-key": "error",
    "no-useless-constructor": "warn",
    "no-useless-rename": "warn",
    "no-var": "error",
    "object-shorthand": [
      "error",
      "always"
    ],
    "prefer-const": [
      "error",
      {
        "destructuring": "any",
        "ignoreReadBeforeAssign": true
      }
    ],
    "prefer-destructuring": [
      "warn",
      {
        "array": true,
        "object": true
      },
      {
        "enforceForRenamedProperties": false
      }
    ],
    "prefer-numeric-literals": "off",
    "prefer-rest-params": "error",
    "prefer-spread": "error",
    "prefer-template": "warn",
    "require-yield": "error",
    "sort-imports": "off",
    "accessor-pairs": "warn",
    "array-callback-return": "warn",
    "class-methods-use-this": "off",
    "consistent-return": "off",
    "default-case": "error",
    "dot-notation": [
      "error",
      {
        "allowKeywords": true
      }
    ],
    "eqeqeq": [
      "error",
      "smart"
    ],
    "guard-for-in": "off",
    "no-alert": "error",
    "no-caller": "error",
    "no-case-declarations": "warn",
    "no-div-regex": "warn",
    "no-else-return": "off",
    "no-empty-function": "warn",
    "no-empty-pattern": "error",
    "no-eq-null": "off",
    "no-eval": "error",
    "no-extend-native": "error",
    "no-extra-bind": "error",
    "no-extra-label": "error",
    "no-fallthrough": "error",
    "no-global-assign": [
      "error",
      {
        "exceptions": []
      }
    ],
    "no-implicit-coercion": "off",
    "no-implicit-globals": "off",
    "no-implied-eval": "warn",
    "no-invalid-this": "off",
    "no-iterator": "error",
    "no-labels": "error",
    "no-lone-blocks": "error",
    "no-loop-func": "error",
    "no-magic-numbers": "off",
    "no-multi-str": "warn",
    "no-new": "warn",
    "no-new-func": "warn",
    "no-new-wrappers": "error",
    "no-octal": "warn",
    "no-octal-escape": "error",
    "no-param-reassign": [
      "error",
      {
        "props": false
      }
    ],
    "no-proto": "warn",
    "no-redeclare": "error",
    "no-restricted-properties": [
      "error",
      {
        "object": "arguments",
        "property": "callee",
        "message": "arguments.callee is deprecated"
      },
      {
        "object": "global",
        "property": "isFinite",
        "message": "Please use Number.isFinite instead"
      },
      {
        "object": "self",
        "property": "isFinite",
        "message": "Please use Number.isFinite instead"
      },
      {
        "object": "window",
        "property": "isFinite",
        "message": "Please use Number.isFinite instead"
      },
      {
        "object": "global",
        "property": "isNaN",
        "message": "Please use Number.isNaN instead"
      },
      {
        "object": "self",
        "property": "isNaN",
        "message": "Please use Number.isNaN instead"
      },
      {
        "object": "window",
        "property": "isNaN",
        "message": "Please use Number.isNaN instead"
      },
      {
        "property": "__defineGetter__",
        "message": "Please use Object.defineProperty instead."
      },
      {
        "property": "__defineSetter__",
        "message": "Please use Object.defineProperty instead."
      },
      {
        "object": "Math",
        "property": "pow",
        "message": "Use the exponentiation operator (**) instead."
      }
    ],
    "no-return-assign": "off",
    "no-return-await": "warn",
    "no-script-url": "error",
    "no-self-assign": [
      "error",
      {
        "props": true
      }
    ],
    "no-self-compare": "error",
    "no-sequences": "off",
    "no-throw-literal": "error",
    "no-unmodified-loop-condition": "warn",
    "no-unused-labels": "error",
    "no-useless-call": "warn",
    "no-useless-concat": "error",
    "no-useless-escape": "off",
    "no-useless-return": "error",
    "no-void": "warn",
    "no-warning-comments": "off",
    "no-with": "error",
    "radix": "error",
    "require-await": "warn",
    "require-unicode-regexp": "off",
    "vars-on-top": "off",
    "yoda": "error",
    "capitalized-comments": "off",
    "consistent-this": "off",
    "func-name-matching": [
      "off",
      "always",
      {
        "includeCommonJSModuleExports": false
      }
    ],
    "func-names": [
      "warn",
      "as-needed"
    ],
    "func-style": "off",
    "id-blacklist": "off",
    "id-length": "off",
    "id-match": "off",
    "line-comment-position": "off",
    "lines-between-class-members": "off",
    "lines-around-directive": [
      "error",
      {
        "before": "always",
        "after": "always"
      }
    ],
    "max-depth": "off",
    "max-lines": "off",
    "max-lines-per-function": "off",
    "max-nested-callbacks": "off",
    "max-params": "off",
    "max-statements": "off",
    "max-statements-per-line": "off",
    "multiline-comment-style": "off",
    "new-cap": [
      "error",
      {
        "capIsNewExceptions": [
          "Router"
        ]
      }
    ],
    "newline-after-var": "off",
    "newline-before-return": "off",
    "no-array-constructor": "error",
    "no-bitwise": "warn",
    "no-continue": "off",
    "no-inline-comments": "off",
    "no-lonely-if": "error",
    "no-multi-assign": "off",
    "no-negated-condition": "off",
    "no-nested-ternary": "warn",
    "no-new-object": "error",
    "no-plusplus": "off",
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      },
      {
        "selector": "DebuggerStatement",
        "message": "`debugger` harms significantly for its function optimization by JS engine. Clean up after your debugging."
      },
      {
        "selector": "SequenceExpression",
        "message": "The comma operator is confusing and a common mistake. Don’t use it!"
      }
    ],
    "no-ternary": "off",
    "no-underscore-dangle": "off",
    "no-unneeded-ternary": [
      "error",
      {
        "defaultAssignment": false
      }
    ],
    "one-var": "off",
    "operator-assignment": "off",
    "padding-line-between-statements": "off",
    "prefer-object-spread": "off",
    "require-jsdoc": "off",
    "sort-keys": "off",
    "sort-vars": "off",
    "spaced-comment": [
      "error",
      "always"
    ]
  }
}